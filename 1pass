#! /usr/bin/env bash
#
# 1pass -- a simple caching wrapper for the "op" 1Password CLI.
#
# Copyright (C) 2017 David Creemer, (twitter: @dcreemer)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

set -e
set -o pipefail

VERSION="1.6.1"

if [ "$XDG_CONFIG_HOME" != "" ] && [ ! -d "${HOME}/.1pass" ]; then
    op_dir="${XDG_CONFIG_HOME}/1pass"
else
    op_dir=${HOME}/.1pass
fi

if [ "$XDG_CACHE_HOME" != "" ] && [ ! -d "${op_dir}/cache" ]; then
    cache_dir="${XDG_CACHE_HOME}/1pass"
else
    cache_dir=${op_dir}/cache
fi

os=$(uname)

# check for bare -V/version request first:
if [ $# -eq 1 ] && [ "$1" == "-V" ]; then
    echo "${VERSION}"
    exit 0
fi

# Try to find the GPG executable
if [ -z "$GPG" ]; then
    # Default to gpg, but prefer what gpgconf says
    GPG="gpg"
    if command -v gpgconf >/dev/null 2>&1; then
        GPG="$( gpgconf | awk -F: '/^gpg:/ { print $NF }' )"
    fi
fi

# test setup:
if [ ! -d "$op_dir" ] || [ ! -r "${op_dir}/config" ]; then
    mkdir -p "$cache_dir"
    cat > "${op_dir}/config" <<CONFIG
# configuration file for 1pass

# set to the ID of your GPG key
self_key=""

# set to the email address associated with your 1Password account
email=""

# set to your 1password domain (e.g. example.1password.com)
domain=""

# if using two-factor authentication automation with oathtool, set to 1
use_totp="0"

CONFIG
    chmod go-rw "${op_dir}/config"
    echo "please config 1pass by editing ${op_dir}/config"
    exit 1
fi
if [ ! -d "$cache_dir" ]; then
    mkdir -p "$cache_dir"
fi

# these are read from the config file:
email=""
self_key=""
domain=""
use_totp=""

# old setting, still supported
subdomain=""

# shellcheck source=config.sample
source "${op_dir}/config"

master=${op_dir}/_master.gpg
secret=${op_dir}/_secret.gpg
totp=${op_dir}/_totp.gpg

# check settings:

if [ "$email" == "" ]; then
    echo "please configure your 1Password email address in ${op_dir}/config"
    exit 1
fi

if [ "$self_key" == "" ]; then
    echo "please configure your GPG key in ${op_dir}/config"
    exit 1
fi

if [ "$subdomain" == "" ] && [ "$domain" == "" ]; then
    echo "please configure your 1Password domain in ${op_dir}/config, e.g. example.1password.com"
    exit 1
fi
domain=${domain:-${subdomain}.1password.com}

if [ ! -r "${master}" ]; then
    echo "please put your master password into ${master}"
    echo "ex: echo \"master-password\" | $GPG -er $email > ${master}"
    exit 1
fi

if [ ! -r "${secret}" ]; then
    echo "please put your ${domain} secret key into ${secret}"
    echo "ex: echo \"A3-XXXXXX-XXXXXX-XXXXX-XXXXX-XXXXX-XXXXX\" | $GPG -er $email > ${secret}"
    exit 1
fi

if [ "${use_totp}" == "1" ] && [ ! -r "${totp}" ]; then
    echo "please put your ${domain} totp secret into ${totp}"
    echo "ex: echo \"XXXXXXXXXXXXXXXX\" | $GPG -er $email > ${totp}"
    exit 1
fi

index=${cache_dir}/_index.gpg
session=${cache_dir}/_session.gpg
token=""
get_result=""
OPTIND=1
refresh=0
verbose=0
print_output=0
clip_time=30
OP_SESSION_NAME=$(echo "$domain" | cut -f1 -d'.' | tr '-' '_')
list_fields=0

usage()
{
cat <<USAGE
usage: 1pass [-fhprv] [<Item>|- [<username|password|totp>]]

  -f   Forget GPG key from gpg-agent, and remove local session
  -h   Help
  -p   Print the 1pass output to stdout, rather than copying to the clipboard
  -l   List all the known fields for the specified item
  -r   Refresh all appropriate data from 1password.com, ignoring local cache
  -v   Verbose output
  -V   Print 1pass version and exit

With no arguments, prints a list of all Logins and Passwords in all 1Password vaults.

With a single argument, fetches the Item (Login, Password, or TOTP) matching the
given name, and copies the resulting password to the clipboard. If "-" is supplied
for <Item>, the item is read from stdin.

With two arguments, fetches the specified field (e.g.) "username" from the named
item, and copies the results to the clipboard.
USAGE
}

sanity_check()
{
    programs=(op jq "$GPG" expect)

    if [ "$use_totp" == "1" ]; then
        programs+=(oathtool)
    fi
    if [ "$os" == "Linux" ] || [ "$os" == "FreeBSD" ]; then
        if [ "$XDG_SESSION_TYPE" == "wayland" ]; then
            programs+=(wl-copy)
        else
            programs+=(xclip)
        fi
    fi

    for cmd in "${programs[@]}"
    do
        if [ $verbose -eq 1 ]; then
            echo "checking for $cmd" 1>&2
        fi
        if ! command -v "$cmd" > /dev/null; then
            echo "Cannot find the '$cmd' command. Please make sure it is installed" 1>&2
            exit 1
        fi
    done

    opversion=$(op --version)
    if [ "${opversion:0:1}" -gt 1 ]; then
        echo "Only 1Password CLI version 1 is supported (found $opversion)" 1>&2
        exit 1
    fi
}

signin()
{
    local pw
    pw=$("$GPG" -d -q "$master")
    local se
    se=$("$GPG" -d -q "$secret")
    if [ "${use_totp}" == "1" ]; then
        local ot
        totp=$("$GPG" -d -q "$totp")
        ot=$(oathtool -b --totp "$totp")
    fi
    if [ $verbose -eq 1 ]; then
        echo "signing in to ${domain} $email" 1>&2
    fi
    local script
    if [ "${use_totp}" == "0" ]; then
        script="
            spawn op signin ${domain} ${email} ${se}
            expect \"${domain}:\"
            send \"${pw}\n\"
            expect {
                   \"Enter your six-digit authentication code:\" {
                           puts -nonewline stderr \"Enter your six-digit authentication code: \"
                           flush stderr
                           interact -o \"\r\" return
                           puts stderr \"\"
                           exp_continue
                   }
                   eof
            }
        "
    else
        local script="
            spawn op signin ${domain} ${email} ${se}
            expect \"${domain}:\"
            send \"${pw}\n\"
            expect {
                   \"Enter your six-digit authentication code:\" {
                           flush stderr
                           send -- \"$ot\r\"
                           puts stderr \"\"
                           exp_continue
                   }
                   eof
            }
        "
    fi
    local output0
    output0=$(expect -c "${script}")
    local output
    output=$(echo "${output0}" | grep "export" || echo -n "_fail_")
    if [ "$output" == "_fail_" ]; then
        echo "1pass failed to signin to ${domain}"
        exit 1
    fi
    # extract token from 'export OP_SESSION_domain="asdsad"'
    local token
    token=$(expr "${output}" : '.*="\(.*\)"')
    echo -n "${token}" | "$GPG" -qe --batch -r "$self_key" > "$session"
}

init_session()
{
    if [ "${token}" != "" ]; then
        # already have token
        return
    fi
    # test for stale session
    if [ ! -r "$session" ] || [ ! "$(find "$session" -mmin -29)" ] || [ $refresh -eq 1 ]; then
        signin
    else
        if [ $verbose -eq 1 ]; then
            echo "using existing session token" 1>&2
        fi
    fi
    token=$("$GPG" -d -q "$session")
    touch "$session"
}

forget_session()
{
    unset "$OP_SESSION_NAME"
    rm -f "$session"
    gpgconf --kill gpg-agent
    echo "cleared local session"
}

#
# fetch the index of all items from the net, and cache
#
fetch_index()
{
    init_session
    if [ $verbose -eq 1 ]; then
        echo "fetching index of all items" 1>&2
    fi
    local items
    items=$(op list items --session="${token}" || echo -n "_fail_")
    if [ "$items" == "_fail_" ]; then
        echo "1pass: failed to fetch index of all items"
        exit 1
    fi
    # backup current index
    if [ -r "$index" ]; then
        cp -a "$index" "${index}.bak"
    fi
    echo -n "${items}" | "$GPG" -qe --batch -r "$self_key" > "$index"
}

#
# fetch an item from the net by uuid and cache it locally
#
fetch_item()
{
    local uuid=$1
    init_session
    if [ $verbose -eq 1 ]; then
        echo "fetching item $uuid" 1>&2
    fi
    local item
    item=$(op get item "$uuid" --session="$token" || echo -n "_fail_")
    if [ "$item" == "_fail_" ]; then
        echo "1pass: failed to fetch item $uuid"
        exit 1
    fi
    echo -n "${item}" | "$GPG" -qe --batch -r "$self_key" > "${cache_dir}/${uuid}.gpg"
}

#
# list the titles of all items in the index
#
list_items()
{
    if [ ! -r "$index" ] || [ $refresh -eq 1 ]; then
        fetch_index
    fi
    "$GPG" -qd "$index" | jq -r ".[].overview.title" | LC_ALL="C" bash -c 'sort -bf'
}

#
# ensure we have the local gpg encoded file of the item given by the uuid
#
ensure_item()
{
    local uuid=$1
    local file=${cache_dir}/${uuid}.gpg
    if [ ! -r "$file" ] || [ $refresh -eq 1 ]; then
        fetch_item "$uuid"
    fi
}

#
# fetch a field from template 001 ("Login")
#
get_001()
{
    local uuid=$1
    local field=${2/"DEFAULT"/"password"}
    local q=""
    if [ "$field" == "username" ] || [ "$field" == "password" ]; then
        q=".details.fields[] | select(.designation==\"${field}\").value"
    else
        q=".details.sections[] | select(.fields).fields[] | select(.t==\"${field}\").v"
    fi
    ensure_item "$uuid"
    get_result=$("$GPG" -qd "${cache_dir}/${uuid}.gpg" | jq -r "${q}" || echo -n "_fail_")
}

#
# fetch a field from template 005 ("Password")
#
get_005()
{
    local uuid=$1
    local field=${2/"DEFAULT"/"password"}
    local q=""
    if [ "$field" == "password" ]; then
        q=".details.${field}"
    else
        q=".details.sections[] | select(.fields).fields[] | select(.t==\"${field}\").v"
    fi
    ensure_item "$uuid"
    get_result=$("$GPG" -qd "${cache_dir}/${uuid}.gpg" | jq -r "${q}" || echo -n "_fail_")
}

#
# fetch a field from template 003 ("Secure Note / notesPlain")
#
get_003()
{
    local uuid=$1
    local field=${2/"DEFAULT"/"notes"}
    if [ "$field" == "notes" ]; then
        # notes feels more natural than notesPlain
        q=".details.notesPlain"
    else
        q=".details.sections[] | select(.fields).fields[] | select(.t==\"${field}\").v"
    fi

    ensure_item "$uuid"

    get_result=$(gpg -qd "${cache_dir}/${uuid}.gpg" | jq -r "${q}" || echo -n "_fail_")
}

#
# fetch a field from template 110 ("Server")
#
get_110()
{
    local uuid=$1
    local field=${2/"DEFAULT"/"password"}
    local q=".details.sections[] | select(.fields).fields[] | select(.t==\"${field}\").v"

    ensure_item "$uuid"

    get_result=$(gpg -qd "${cache_dir}/${uuid}.gpg" | jq -r "${q}" || echo -n "_fail_")
}

#
# fetch the list of fields from template 001 ("Login")
#
get_fields_001()
{
    _get_fields_template "$1" "username" "password"
}

#
# fetch the list of fields from template 003 ("Secure Note")
#
get_fields_003()
{
    _get_fields_template "$1" "notes"
}

#
# fetch the list of fields from template 005 ("Password")
#
get_fields_005()
{
    _get_fields_template "$1" "password"
}

#
# fetch the list of fields from template 110 ("Server")
#
get_fields_110()
{
    _get_fields_template "$1"
}

_get_fields_template()
{
    local uuid=$1
    shift
    local q='.details.sections[] | select(.fields).fields[] | select(.t!="").t'
    local fields=("${@}")
    ensure_item "$uuid"
    while read -r f; do
        fields+=("$f")
    done < <("$GPG" -qd "${cache_dir}/${uuid}.gpg" | jq -r "${q}" || echo -n "_fail_")
    get_result=$(_join_by $'\n' "${fields[@]}")
}

function _join_by { local IFS="$1"; shift; echo "$*"; }

#
# fetch a TOTP value for the given item
#
get_totp()
{
    # Make sure we have a current and valid session and then get the UUID
    init_session
    if [ ! -r "$index" ] || [ $refresh -eq 1 ]; then
        fetch_index
    fi
    local title
    title="${1}"
    if [ "$title" == "-" ]; then
        # read title from stdin. turn off error propogation to handle EOF as well as NL
        set +e
        read -r title
        set -e
    fi

    local uuid
    uuid=$("$GPG" -qd "$index" | jq -r ".[] | select(.overview.title==\"$title\").uuid")
    # Fetch the TOTP
    if [ $verbose -eq 1 ]; then
        echo "fetching TOTP for $uuid" 1>&2
    fi
    local totp
    totp=$(op get totp "$uuid" --session="$token" || echo -n "_fail_")
    if [ "$item" == "_fail_" ]; then
        echo "1pass: failed to fetch TOTP for $uuid"
        exit 1
    fi
    if [ $? ]; then
        get_result="${totp}"
        output_result
    fi
}

output_result()
{
    if [ $print_output -eq 1 ]; then
        echo "${get_result}"
    else
        local pbcopy
        pbcopy=pbcopy
        if [ "$os" == "Linux" ] || [ "$os" == "FreeBSD" ]; then
            if [ "$XDG_SESSION_TYPE" == "wayland" ]; then
                pbcopy="wl-copy"
            else
                pbcopy="xclip -selection clipboard"
            fi
        fi
        echo -n "${get_result}" | $pbcopy
        # sleep and reset clipboard
        local sleep_argv0
        sleep_argv0="1pass sleep for user $(id -u)"
        pkill -f "^$sleep_argv0" 2>/dev/null && sleep 0.5
        (
            ( exec -a "$sleep_argv0" sleep "$clip_time" )
            echo -n "CLEAR" | $pbcopy
        ) 2>/dev/null & disown
    fi
}

get_by_title()
{
    _get_by "get_" "${@}"
}

get_fields_by_title()
{
    _get_by "get_fields_" "${@}"
}

_get_by()
{
    local func=$1
    local title=$2
    local field=$3
    if [ "$title" == "-" ]; then
        # read title from stdin. turn off error propogation to handle EOF as well as NL
        set +e
        read -r title
        set -e
    fi
    if [ ! -r "$index" ] || [ $refresh -eq 1 ]; then
        fetch_index
    fi
    # read both uuid and templateUuid. Complicated call is so that we only call GPG once
    q=".[] | select(.overview.title==\"${title}\").uuid + \":\" + select(.overview.title==\"${title}\").templateUuid"
    IFS=':' read -r uuid tid <<< "$("$GPG" -qd "$index" | jq -r "${q}")"
    if [ "$tid" != "" ]; then
        "${func}${tid}" "$uuid" "$field"
        if [ $? ]; then
            output_result
        fi
    fi
}

while getopts "f?h?p?l?r?v?:" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        f)
            forget_session
            exit 0
            ;;
        p)
            print_output=1
            ;;
        l)
            print_output=1
            list_fields=1
            ;;
        r)
            refresh=1
            ;;
        v)
            verbose=1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            ;;
    esac
done

shift $((OPTIND-1))

sanity_check

if [ $# -eq 0 ]; then
    list_items
elif [ $# -eq 1 ]; then
    if [[ $list_fields -eq 1 ]]; then
        get_fields_by_title "$1"
    else
        get_by_title "$1" DEFAULT
    fi
elif [ $# -eq 2 ]; then
    case "$2" in
        totp ) get_totp "$1"          ;;
        *    ) get_by_title "$1" "$2" ;;
    esac
fi
